
R version 4.4.1 (2024-06-14 ucrt) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "mltable"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "mltable-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('mltable')
Loading required package: multilevel
Warning: package 'multilevel' was built under R version 4.4.2
Loading required package: nlme
Loading required package: MASS
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("calculate_p_values")
> ### * calculate_p_values
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: calculate_p_values
> ### Title: Calculate p-values for a correlation matrix
> ### Aliases: calculate_p_values
> 
> ### ** Examples
> 
> ## Not run: 
> ##D x <- matrix(rnorm(100), ncol = 5)
> ##D R <- cor(x, method = "pearson", use = "pairwise.complete.obs")
> ##D p_values <- calculate_p_values(R, x, method = "pearson", use = "pairwise.complete.obs")
> ##D print(p_values)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("calculate_p_values", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("corr_level2")
> ### * corr_level2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: corr_level2
> ### Title: Calculate and Format Correlation Matrix for Level 2 Data
> ### Aliases: corr_level2
> 
> ### ** Examples
> 
> ## Not run: 
> ##D file_path <- system.file("extdata", "teamstate.csv", package = "mltable")
> ##D teamstate <- read.csv(file_path)
> ##D var_list2 <- list(
> ##D   var1 = 5:14,
> ##D   var2 = 15:24,
> ##D   var3 = 25:28
> ##D )
> ##D result <- corr_level2(data = teamstate,
> ##D                       var_list = var_list2,
> ##D                       groupid = "Team",
> ##D                       var_labels = c("Team PA", "Team NA", "Team Psychological Safety"),
> ##D                       rwg_scale = 7)
> ##D print(result)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("corr_level2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("corr_table")
> ### * corr_table
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: corr_table
> ### Title: This function calculates the correlation matrix for a given list
> ###   of variables, formats the results, and includes additional metrics
> ###   such as mean, standard deviation, and Cronbach's alpha if requested.
> ### Aliases: corr_table
> 
> ### ** Examples
> 
> ## Not run: 
> ##D file_path <- system.file("extdata", "teamstate.csv", package = "mltable")
> ##D teamstate <- read.csv(file_path)
> ##D var_list <- list(
> ##D   var1 = 3,
> ##D   ver2 = 4,
> ##D   var2 = 5:14,
> ##D   var3 = 15:24,
> ##D   var4 = 25:28
> ##D )
> ##D result <- corr_level1(teamstate,
> ##D                       var_list,
> ##D                       var_labels = c("Gender", "Age", "Positive affect",
> ##D                       "Negative affect", "Psychological safety"))
> ##D print(result)
> ##D write.csv(result, file = "Correlation table individual member states.csv", row.names = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("corr_table", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.3 0.01 0.33 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
